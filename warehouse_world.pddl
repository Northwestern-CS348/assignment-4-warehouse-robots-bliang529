(define (domain warehouse)
	(:requirements :typing)
	(:types robot pallette - bigobject
        	location shipment order saleitem)

  	(:predicates
    	(ships ?s - shipment ?o - order)
    	(orders ?o - order ?si - saleitem)
    	(unstarted ?s - shipment)
    	(started ?s - shipment)
    	(complete ?s - shipment)
    	(includes ?s - shipment ?si - saleitem)

    	(free ?r - robot)
    	(has ?r - robot ?p - pallette)

    	(packing-location ?l - location)
    	(packing-at ?s - shipment ?l - location)
    	(available ?l - location)
    	(connected ?l - location ?l - location)
    	(at ?bo - bigobject ?l - location)
    	(no-robot ?l - location)
    	(no-pallette ?l - location)

    	(contains ?p - pallette ?si - saleitem)
  )

   
    (:action robotMove
        :parameters (?r - robot ?l1 - location ?l2 - location)
        :precondition (and  (free ?r) 
                            (at ?r ?l1) 
                            (no-robot ?l2) 
                            (connected ?l1 ?l2))
        :effect (and    (not (at ?r ?l1)) 
                        (at ?r ?l2) 
                        (not (no-robot ?l2))
                        (no-robot ?l1))
    )
   
    (:action robotMoveWithPallette
        :parameters (?r - robot ?p - pallette ?l1 - location ?l2 - location)
        :precondition (and  (free ?r)
                            (at ?r ?l1)
                            (at ?p ?l1)
                            (no-robot ?l2) 
                            (no-pallette ?l2) 
                            (connected ?l1 ?l2))
        :effect (and    (not(at ?r ?l1)) 
                        (at ?r ?l2)
                        (not (at ?p ?l1)) 
                        (at ?p ?l2)
                        (not (no-robot ?l2))
                        (no-robot ?l1)
                        (not (no-pallette ?l2))
                        (no-pallette ?l1))
    )
   
   (:action startShipment
        :parameters (?s - shipment ?o - order ?l - location)
        :precondition (and  (unstarted ?s)
                            (not (complete ?s))
                            (ships ?s ?o)
                            (available ?l)
                            (packing-location ?l))
        :effect (and    (started ?s)
                        (packing-at ?s ?l)
                        (not (unstarted ?s))
                        (not (available ?l)))
    )
   
    (:action moveItemFromPalletteToShipment
        :parameters (?l - location ?s - shipment ?sa - saleitem ?p - pallette ?o - order)
        :precondition (and  (orders ?o ?sa) 
                            (ships ?s ?o)
                            (packing-at ?s ?l)
                            (at ?p ?l)
                            (contains ?p ?sa)
                            (not(includes ?s ?sa))
                            (started ?s))
        :effect (and    (includes ?s ?sa)
                        (not(orders ?o ?sa))
                        (not(contains ?p ?sa))
                        (when   (or
                                (not(exists (?sa2 - saleitem)(contains ?p ?sa2)))
                                (not(exists (?sa3 - saleitem)   (and    (contains ?p ?sa3) 
                                                                        (orders ?o ?sa3)))))
                                (not(packing-at ?s ?l))))
    )
    
    (:action completeShipment
        :parameters (?s - shipment ?o - order ?l - location)
        :precondition (and  (ships ?s ?o)
                            (not (exists (?sa - saleitem)(orders ?o ?sa)))
                            (not (complete ?s)))
        :effect (and    (complete ?s)
                        (available ?l))
    )

)
